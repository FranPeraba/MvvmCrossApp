// This file has been autogenerated from a class added in the UI designer.

using System;
using MvvmCross.Platforms.Ios.Views;
using MvvmCrossApp.Core.Resources;
using MvvmCrossApp.Core.ViewModels;
using MvvmCrossApp.iOS.Sources;
using UIKit;

namespace MvvmCrossApp.iOS.Views
{
    [MvxFromStoryboard("MainView")]
	public partial class SearchView : MvxTableViewController<SearchMedicinesViewModel>, IUISearchResultsUpdating, IUISearchBarDelegate,
		IUITabBarControllerDelegate, IUISearchControllerDelegate
	{
		UISearchController _searchController;
		UIActivityIndicatorView _activityIndicator;
		MedicinesTableViewSource _source;
		
		public SearchView (IntPtr handle) : base (handle)
		{
		}
		
		bool _isLoading;
		public bool IsLoading
		{
			get => _isLoading;
			set
			{
				_isLoading = value;
				if (!value)
					_activityIndicator.StopAnimating();
				else
					_activityIndicator.StartAnimating();
			}
		}

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            
            SetupActivityIndicator();
            
            SetupTable();
            
            SetupSearchController();
            
            SetupBindings();

            Title = Strings.SearchMedicine;
        }

        public void UpdateSearchResultsForSearchController(UISearchController searchController)
        {
	        ViewModel.SearchTerm = searchController.SearchBar.Text;
			TableView.ReloadData();
		}

        void SetupBindings()
        {
	        var set = CreateBindingSet();
	        set.Bind(this).For(v => v.IsLoading).To(vm => vm.IsLoading);

			set.Bind(_source).For(v => v.ItemsSource).To(vm => vm.Medicines);
			set.Bind(_source).For(v => v.SelectionChangedCommand).To(vm => vm.MedicineClickCommand);
	        set.Apply();
        }

        void SetupSearchController()
        {
	        _searchController = new UISearchController
	        {
		        DimsBackgroundDuringPresentation = false,
		        HidesNavigationBarDuringPresentation = true,
		        DefinesPresentationContext = true,
		        Delegate = this
	        };

	        _searchController.SearchBar.Delegate = this;
	        _searchController.SearchResultsUpdater = this;

	        _searchController.SearchBar.Placeholder = Strings.QueryHintSearch;
	        
	        NavigationItem.SearchController = _searchController;
        }
        
        protected override void Dispose(bool disposing)
        {
	        base.Dispose(disposing);
	        if (_searchController != null)
	        {
		        _searchController.Dispose();
		        _searchController = null;
	        }
        }
        
        void SetupActivityIndicator()
        {
	        _activityIndicator = new UIActivityIndicatorView
	        {
		        ActivityIndicatorViewStyle = UIActivityIndicatorViewStyle.Medium,
		        HidesWhenStopped = true
	        };

	        View.AddSubview(_activityIndicator);
	        _activityIndicator.TranslatesAutoresizingMaskIntoConstraints = false;
	        _activityIndicator.CenterXAnchor.ConstraintEqualTo(View.CenterXAnchor).Active = true;
	        _activityIndicator.CenterYAnchor.ConstraintEqualTo(View.CenterYAnchor, -250f).Active = true;
	        _activityIndicator.Color = UIColor.FromRGB(223, 80, 65);
        }
        
        void SetupTable()
        {
	        TableView.RowHeight = UITableView.AutomaticDimension;
	        TableView.EstimatedRowHeight = 44;
	        TableView.TableFooterView = new UIView();

			_source = new MedicinesTableViewSource(TableView);
			TableView.Source = _source;
        }
	}
}
